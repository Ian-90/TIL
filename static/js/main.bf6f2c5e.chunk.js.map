{"version":3,"sources":["components/Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenre","_ref3","genre","Movie","_ref","genres","synopsis","Movie_MoviePoster","map","idx","Movie_MovieGenre","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","componentDidMount","_this","getMovies","renderMovies","movies","movie","src_components_Movie","title_english","medium_cover_image","id","_callee","regenerator_default","wrap","_context","prev","next","callApi","sent","setState","stop","fetch","then","res","json","data","catch","err","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUA8BMA,EAAc,SAAAC,GAAmB,IAAjBC,EAAiBD,EAAjBC,OAAQC,EAASF,EAATE,IAC5B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQC,IAAKA,EAAKK,MAAOL,EAAKM,UAAU,kBAIhDC,EAAa,SAAAC,GAAa,IAAXC,EAAWD,EAAXC,MACnB,OACER,EAAAC,EAAAC,cAAA,QAAMG,UAAU,eAAeG,IAoBpBC,EArDD,SAAAC,GAAuC,IAArCN,EAAqCM,EAArCN,MAAON,EAA8BY,EAA9BZ,OAAQa,EAAsBD,EAAtBC,OAAQC,EAAcF,EAAdE,SACrC,OACEZ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACbL,EAAAC,EAAAC,cAACW,EAAD,CAAaf,OAAQA,EAAQC,IAAKK,KAEpCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACbL,EAAAC,EAAAC,cAAA,UAAKE,GACLJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACZM,EAAOG,IAAI,SAACN,EAAOO,GAAR,OAAgBf,EAAAC,EAAAC,cAACc,EAAD,CAAYR,MAAOA,EAAOS,IAAKF,OAE7Df,EAAAC,EAAAC,cAAA,KAAGG,UAAU,kBACXL,EAAAC,EAAAC,cAACgB,EAAAjB,EAAD,CACEkB,KAAMP,EACNQ,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBC6BLC,6MA9CbC,MAAQ,KAIRC,kBAAoB,WAClBC,EAAKC,eAGPC,aAAe,WAWb,OAVeF,EAAKF,MAAMK,OAAOhB,IAAI,SAAAiB,GACnC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,CACG5B,MAAO2B,EAAME,cACbnC,OAAQiC,EAAMG,mBACdjB,IAAKc,EAAMI,GACXxB,OAAQoB,EAAMpB,OACdC,SAAUmB,EAAMnB,gBAO9BgB,+BAAY,SAAAQ,IAAA,IAAAN,EAAA,OAAAO,EAAApC,EAAAqC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACWd,EAAKe,UADhB,OACJZ,EADIS,EAAAI,KAEVhB,EAAKiB,SAAS,CACZd,WAHQ,wBAAAS,EAAAM,SAAAT,QAOZM,QAAU,WACR,OAAOI,MAAM,iEACZC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKpB,SACvBqB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,8EAGnB,IACCtB,EAAWyB,KAAK9B,MAAhBK,OACR,OACE9B,EAAAC,EAAAC,cAAA,OAAKG,UAAWyB,EAAS,MAAQ,eAC9ByB,KAAK9B,MAAMK,OAASyB,KAAK1B,eAAiB,kBAzCjC2B,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.bf6f2c5e.chunk.js","sourcesContent":["import React from 'react';\nimport './Movie.css'\nimport PropTypes from 'prop-types';\nimport LinesEllipsis from 'react-lines-ellipsis'\n\nconst Movie = ({title, poster, genres, synopsis}) => {\n  return (\n    <div className='Movie'>\n      <div className='Movie_Columns'>\n        <MoviePoster poster={poster} alt={title} />\n      </div>\n      <div className='Movie_Columns'>\n        <h1>{title}</h1>\n        <div className='Movie_Genres'>\n          {genres.map((genre, idx) => <MovieGenre genre={genre} key={idx} />)}\n        </div>\n        <p className='Movie_Synopsis'>\n          <LinesEllipsis \n            text={synopsis}\n            maxLine='3'\n            ellipsis='...'\n            trimRight\n            basedOn='letters'\n          />\n        </p>\n      </div>\n    </div>\n  )\n}\n\nconst MoviePoster = ({poster, alt}) => {\n  return (\n    <img src={poster} alt={alt} title={alt} className='Movie_Poster' />\n  )\n}\n\nconst MovieGenre = ({genre}) => {\n  return (\n    <span className='Movie_Genre'>{genre}</span>\n  )\n}\n\nMovie.propTypes = {\n  title: PropTypes.string.isRequired,\n  poster: PropTypes.string.isRequired,\n  genres: PropTypes.array.isRequired,\n  synopsis: PropTypes.string.isRequired\n}\n\nMoviePoster.propTypes = {\n  poster: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired\n}\n\nMovieGenre.propTypes = {\n  genre: PropTypes.string.isRequired\n}\n\nexport default Movie;","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './components/Movie';\n\nclass App extends Component {\n  state = {\n\n  }\n\n  componentDidMount = () => {\n    this.getMovies();\n  }\n\n  renderMovies = () => {\n    const movies = this.state.movies.map(movie => {\n      return <Movie \n                title={movie.title_english} \n                poster={movie.medium_cover_image} \n                key={movie.id} \n                genres={movie.genres}\n                synopsis={movie.synopsis} \n              />\n    })\n\n    return movies\n  }\n  \n  getMovies = async () => {\n    const movies = await this.callApi()\n    this.setState({\n      movies\n    }) \n  }\n\n  callApi = () => {\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=download_count')\n    .then(res => res.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err))\n  }\n\n  render() {\n    const { movies } = this.state\n    return (\n      <div className={movies ? 'App' : 'App-loading'}>\n        {this.state.movies ? this.renderMovies() : 'Loading'}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}